=Cache FileSystem ( Updated 1.0 Beta ) =

Working with localfiles is tedious. You must provide paths with a native path.

To overcome this situation we have provide StageWebViewBridge with new ways of referencing resources as we have explained in [ContentLoading]


== Begin the scenes ==

But, what happends begin the scenes?

By default StageWebViewBridge will assume that the "root" dir of your web files is the "www" directory inside your File.applicationDirectory.

=== Explanation of directories ==
{{{
app:/www................This is your working directory.
			Put inside it all your html project files.
			Make only changes in files of this directory.!!! 

app:/wwwSource..........Contains parsed sources and files.

}}}


=== How Cache system works ===

Every time you compile your projects, depending of the debug and plattform StageWebViewBridge will do:

*StageWebViewDisk.setDebugMode( true )*

 ==== DESKTOP ====
{{{
wwwSource dir will be generated in the applicationDirectory dir and used as the www root folder
}}}
 ==== iOS ====
{{{
 www dir will be used as the www root folder
}}}
 ==== ANDROID ====
{{{
 wwwSource dir will be generated in the applicationStorageDirectory dir and used as the www root folder
}}}
 
*StageWebViewDisk.setDebugMode( false )*

 ==== DESKTOP ====
{{{
 www dir will be used as the www root folder
*ATENTION*
}}}
 ==== iOS ====
{{{
 www dir will be used as the www root folder
}}} 
 ==== ANDROID ====
{{{
 wwwSource dir will be generated in the applicationStorageDirectory dir and used as the www root folder
}}}

=== App First Run ===

When the app finish launching, it test if it's the first time that its run.

If so, it will preparse all the files of app:/htmlSource to app:/htmlCache.

== Public Methods ==

=== StageWebViewBridge.setRootFolder ===
{{{
// sets the default dir to 'htmlFiles'
StageWebViewBridge.setRootFolder('htmlFiles');

// this will create 2 new dirs
app:/htmlFilesCache
app:/htmlFilesSource
}}}

=== StageWebViewBridge.setSourceFileExtensions ===
{{{
// Change the extensions of the files to parse.
// Default extensions are ["html","htm","css","js"]

// now limit the files to be html or js, and left intact the css and htm files
StageWebViewBridge.setSourceFileExtensions(['html','js']);
}}}